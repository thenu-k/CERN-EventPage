import { chunk } from "./core";
/**
 * Creates an async chunk that handles loading, error, and retry logic.
 * @param fetcher The async function to fetch data.
 * @param options Configuration options for the async chunk.
 * @returns An async chunk instance.
 */
export function asyncChunk(fetcher, options = {}) {
    const { initialData = null, onError, retryCount = 0, retryDelay = 1000, } = options;
    const initialState = {
        loading: true,
        error: null,
        data: initialData,
    };
    const baseChunk = chunk(initialState);
    const fetchData = async (retries = retryCount) => {
        baseChunk.set({ ...baseChunk.get(), loading: true, error: null });
        try {
            const data = await fetcher();
            baseChunk.set({ loading: false, error: null, data });
        }
        catch (error) {
            if (retries > 0) {
                await new Promise(resolve => setTimeout(resolve, retryDelay));
                return fetchData(retries - 1);
            }
            baseChunk.set({ loading: false, error: error, data: baseChunk.get().data });
            if (onError) {
                onError(error);
            }
        }
    };
    fetchData();
    const asyncChunkInstance = {
        ...baseChunk,
        reload: async () => {
            await fetchData();
        },
        mutate: (mutator) => {
            const currentState = baseChunk.get();
            const newData = mutator(currentState.data);
            baseChunk.set({ ...currentState, data: newData });
        },
        reset: () => {
            baseChunk.set(initialState);
            fetchData();
        },
    };
    return asyncChunkInstance;
}
