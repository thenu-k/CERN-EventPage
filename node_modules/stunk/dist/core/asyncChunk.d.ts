import { Chunk } from "./core";
import { AsyncChunkOpt } from "./types";
export interface AsyncState<T, E extends Error> {
    loading: boolean;
    error: E | null;
    data: T | null;
}
export interface AsyncChunk<T, E extends Error = Error> extends Chunk<AsyncState<T, E>> {
    /**
     * Reload the data from the source.
     */
    reload: () => Promise<void>;
    /**
     * Mutate the data directly.
     */
    mutate: (mutator: (currentData: T | null) => T) => void;
    /**
     * Reset the state to the initial value.
     */
    reset: () => void;
}
/**
 * Creates an async chunk that handles loading, error, and retry logic.
 * @param fetcher The async function to fetch data.
 * @param options Configuration options for the async chunk.
 * @returns An async chunk instance.
 */
export declare function asyncChunk<T, E extends Error = Error>(fetcher: () => Promise<T>, options?: AsyncChunkOpt<T, E>): AsyncChunk<T, E>;
