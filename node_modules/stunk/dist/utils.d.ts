import { Chunk, Middleware } from "./core/core";
import { AsyncChunk } from "./core/asyncChunk";
import { InferAsyncData } from "./core/types";
export declare function isValidChunkValue(value: any): boolean;
export declare function isChunk<T>(value: any): value is Chunk<T>;
export declare function once<T>(fn: () => T): () => T;
export declare function combineAsyncChunks<T extends Record<string, AsyncChunk<any>>>(chunks: T): Chunk<{
    loading: boolean;
    error: Error | null;
    data: {
        [K in keyof T]: InferAsyncData<T[K]> | null;
    };
}>;
export declare function processMiddleware<T>(initialValue: T, middleware?: Middleware<T>[]): T;
export declare function shallowEqual<T>(a: T, b: T): boolean;
