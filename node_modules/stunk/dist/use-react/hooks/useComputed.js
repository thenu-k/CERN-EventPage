import { useState, useEffect, useMemo } from "react";
import { computed } from "../../core/computed";
/**
 * A hook that computes a value based on multiple chunks.
 * Automatically re-computes when any dependency changes.
 */
export function useComputed(dependencies, computeFn) {
    // Create the computed value - memoize it based on dependencies to prevent recreation
    const computedValue = useMemo(() => computed(dependencies, computeFn), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...dependencies]);
    const [state, setState] = useState(() => computedValue.get());
    useEffect(() => {
        const unsubscribe = computedValue.subscribe((newValue) => {
            setState(newValue);
        });
        return () => {
            unsubscribe();
        };
    }, [computedValue]);
    return state;
}
