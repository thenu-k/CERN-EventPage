import { useState, useEffect, useCallback } from "react";
/**
 * A hook that handles asynchronous state with built-in reactivity.
 * Provides loading, error, and data states.
 */
export function useAsyncChunk(asyncChunk) {
    const [state, setState] = useState(() => asyncChunk.get());
    useEffect(() => {
        const unsubscribe = asyncChunk.subscribe((newState) => {
            setState(newState);
        });
        return () => unsubscribe();
    }, [asyncChunk]);
    const reload = useCallback(() => asyncChunk.reload(), [asyncChunk]);
    const mutate = useCallback((mutator) => asyncChunk.mutate(mutator), [asyncChunk]);
    const reset = useCallback(() => asyncChunk.reset(), [asyncChunk]);
    const { data, loading, error } = state;
    return {
        state,
        data,
        loading,
        error,
        reload,
        mutate,
        reset,
    };
}
