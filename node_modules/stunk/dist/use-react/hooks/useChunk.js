import { useState, useEffect, useCallback } from "react";
import { select } from "../../core/selector";
/**
 * A lightweight hook that subscribes to a chunk and returns its current value, along with setters, selector, reset and destroy.
 * Ensures reactivity and prevents unnecessary re-renders.
 */
export function useChunk(chunk, selector) {
    const selectedChunk = selector ? select(chunk, selector) : chunk;
    const [state, setState] = useState(() => selectedChunk.get());
    useEffect(() => {
        const unsubscribe = selectedChunk.subscribe((newValue) => {
            setState(() => newValue);
        });
        return () => unsubscribe();
    }, [selectedChunk]);
    const set = useCallback((valueOrUpdater) => {
        chunk.set(valueOrUpdater);
    }, [chunk]);
    const reset = useCallback(() => {
        chunk.reset();
    }, [chunk]);
    const destroy = useCallback(() => {
        chunk.destroy();
    }, [chunk]);
    return [state, set, reset, destroy];
}
