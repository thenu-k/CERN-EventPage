export function withHistory(baseChunk, options = {}) {
    const { maxHistory = 100 } = options;
    const history = [baseChunk.get()];
    let currentIndex = 0;
    let isHistoryAction = false;
    const historyChunk = {
        ...baseChunk,
        set: (newValueOrUpdater) => {
            if (isHistoryAction) {
                baseChunk.set(newValueOrUpdater);
                return;
            }
            // Process the value or updater function
            let newValue;
            if (typeof newValueOrUpdater === 'function') {
                // Get current value and apply the updater function
                const currentValue = baseChunk.get();
                newValue = newValueOrUpdater(currentValue);
            }
            else {
                // Use directly as the new value
                newValue = newValueOrUpdater;
            }
            history.splice(currentIndex + 1);
            history.push(newValue);
            // Limit history size
            if (history.length > maxHistory) {
                console.warn("History limit reached. Removing oldest entries.");
                const removeCount = history.length - maxHistory;
                history.splice(0, removeCount);
                currentIndex = Math.max(0, currentIndex - removeCount);
            }
            currentIndex = history.length - 1;
            baseChunk.set(newValue);
        },
        undo: () => {
            if (!historyChunk.canUndo())
                return;
            isHistoryAction = true;
            currentIndex--;
            historyChunk.set(history[currentIndex]);
            isHistoryAction = false;
        },
        redo: () => {
            if (!historyChunk.canRedo())
                return;
            isHistoryAction = true;
            currentIndex++;
            historyChunk.set(history[currentIndex]);
            isHistoryAction = false;
        },
        canUndo: () => currentIndex > 0,
        canRedo: () => currentIndex < history.length - 1,
        getHistory: () => [...history],
        clearHistory: () => {
            const currentValue = baseChunk.get();
            history.length = 0;
            history.push(currentValue);
            currentIndex = 0;
        },
        // Override destroy to clean up history
        destroy: () => {
            history.length = 0;
            baseChunk.destroy();
        }
    };
    return historyChunk;
}
